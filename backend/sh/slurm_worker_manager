#!/bin/bash

# Script Name: slurm_worker_manager
# Description: Script to manage a Slurm worker with start, stop, restart and status functionality.
# Author: Cristiano Singulani
# Version: 1.0

# Configuration
APP_DIR="${APP_DIR:-}"  # Default to empty if not set
PID_FILE="${APP_DIR}/.pidfile"  # PID file location
LOG_FILE="${APP_DIR}/slurm_worker_manager.log"  # Log file location

# Logging function
log() {
    local level=$1
    local message=$2
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] $message" | tee -a "$LOG_FILE"
}

# Validate $APP_DIR
validate_app_dir() {
    if [ -z "$APP_DIR" ]; then
        echo "\$APP_DIR environment variable is not configured."
        echo "Please set \$APP_DIR to the directory where the Slurm worker should run."
        exit 1
    fi

    if [ ! -d "$APP_DIR" ]; then
        echo "\$APP_DIR is not a valid directory: $APP_DIR"
        exit 1
    fi

    echo "Using APP_DIR: $APP_DIR"
}

# Function to start the Slurm worker
start_slurm_worker() {
    if [ -f "$PID_FILE" ]; then
        local pid
        pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            log "ERROR" "Slurm worker is already running with PID: $pid"
            exit 1
        else
            log "WARN" "Stale PID file found. Removing it."
            rm -f "$PID_FILE"
        fi
    fi

    # Change to the $APP_DIR directory
    cd "$APP_DIR" || {
        log "ERROR" "Failed to change to directory: $APP_DIR"
        exit 1
    }

    slurm_worker.sh > /dev/null 2>&1 &
    local worker_pid=$!

    # Save the PID to the PID file
    echo "$worker_pid" > "$PID_FILE"
    log "INFO" "Slurm worker started with PID: $worker_pid"
}

# Function to stop the Slurm worker
stop_slurm_worker() {
    if [ ! -f "$PID_FILE" ]; then
        log "ERROR" "PID file not found. Is the Slurm worker running?"
        exit 1
    fi

    local pid
    pid=$(cat "$PID_FILE")

    if ! ps -p "$pid" > /dev/null 2>&1; then
        log "WARN" "Slurm worker with PID $pid is not running. Removing stale PID file."
        rm -f "$PID_FILE"
        exit 1
    fi

    log "INFO" "Stopping Slurm worker with PID $pid..."
    
    # First, try to kill all child processes (Celery workers)
    pkill -P "$pid" 2>/dev/null || true
    
    # Send SIGTERM to the main process
    if kill "$pid" 2>/dev/null; then
        log "INFO" "Sent SIGTERM to PID $pid. Waiting for graceful shutdown..."
        
        # Wait up to 30 seconds for graceful shutdown
        local count=0
        while ps -p "$pid" > /dev/null 2>&1 && [ $count -lt 30 ]; do
            sleep 1
            count=$((count + 1))
        done
        
        # If still running, force kill
        if ps -p "$pid" > /dev/null 2>&1; then
            log "WARN" "Process did not stop gracefully. Sending SIGKILL..."
            kill -9 "$pid" 2>/dev/null || true
            
            # Kill any remaining child processes
            pkill -9 -P "$pid" 2>/dev/null || true
            
            # Wait a bit more
            sleep 2
        fi
        
        # Final check
        if ps -p "$pid" > /dev/null 2>&1; then
            log "ERROR" "Failed to stop Slurm worker with PID $pid."
            exit 1
        else
            rm -f "$PID_FILE"
            log "INFO" "Slurm worker with PID $pid stopped successfully."
        fi
    else
        log "ERROR" "Failed to send signal to Slurm worker with PID $pid."
        exit 1
    fi
}

# Function to restart the Slurm worker
restart_slurm_worker() {
    if [ -f "$PID_FILE" ]; then
        stop_slurm_worker
    fi
    start_slurm_worker
}

# Function to check the status of the Slurm worker
status_slurm_worker() {
    if [ -f "$PID_FILE" ]; then
        local pid
        pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            log "INFO" "Slurm worker is running with PID: $pid"
        else
            log "WARN" "PID file exists but Slurm worker is not running."
        fi
    else
        log "INFO" "Slurm worker is not running."
    fi
}

# Main script logic
main() {
    validate_app_dir

    case "$1" in
        start)
            start_slurm_worker
            ;;
        stop)
            stop_slurm_worker
            ;;
        restart)
            restart_slurm_worker
            ;;
        status)
            status_slurm_worker
            ;;
        *)
            echo "Usage: $0 {start|stop|restart|status}"
            exit 1
            ;;
    esac
}

# Run the script
main "$@"